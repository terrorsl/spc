name: Build python package and execute file

on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  # push:
  #  branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  # push:
  #   tags:
  #     - 'v*'
  #     - 'beta-v*'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # changelog:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: "Generate release changelog"
  #       uses: heinrichreimer/github-changelog-generator-action@v2.3
  #       with:
  #         token: ${{ secrets.GITHUB_TOKEN }}
  tag_version:
    runs-on: ubuntu-latest
    outputs:
        upload_url: ${{steps.release.outputs.upload_url}}
    steps:
        - name: create tag
          uses: mathieudutour/github-tag-action@v6.2
          id: tag_version
          with:
              github_token: ${{ secrets.GITHUB_TOKEN }}
        - name: Create release
          id: release
          uses: ncipollo/release-action@v1
          with:
            tag: ${{steps.tag_version.outputs.new_tag}}
  # create_release:
  #   name: Create Release
  #   runs-on: ubuntu-latest
  #   needs: changelog
  #   outputs:
  #     upload_url: ${{ steps.create_release.outputs.upload_url }}
  #   steps:
  #   - name: Create Release For Tag
  #     id: create_release
  #     uses: actions/create-release@v1
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       tag_name: ${{ github.ref }}
  #       release_name: Release ${{ github.ref }}
  #       body: ${{ needs.changelog.outputs.changelog }}
  #       draft: false
  #       prerelease: ${{ contains(github.ref, 'beta') }}
  build:
    needs: tag_version
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            PYINSTALLER: --add-data=font:spc/standard
            OUTPUT_NAME: spc
          - os: macos-latest
            OUTPUT_NAME: spc
            PYINSTALLER: --add-data=font:spc/standard
          - os: windows-latest
            OUTPUT_NAME: spc
            PYINSTALLER: --add-data=font:spc/standard
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      - name: Set up python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install dependencies for ${{matrix.os}}
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel pyinstaller
          pip install -r requirements.txt
          python setup.py bdist_wheel
          pip install dist/spc-0.3.0-py3-none-any.whl
          # pyinstaller --onefile --name spc --add-data=font;spc/standard --hidden-import=spc ./spc_cmd/main.py
          pyinstaller --name spc ${{matrix.PYINSTALLER}} --hidden-import=spc ./spc_cmd/main.py
          # zip -r spc_${{matrix.os}}.zip dist/${{matrix.OUTPUT_NAME}}
      - name: Zip
        uses: vimtor/action-zip@v1.2
        with: 
          files: dist/${{matrix.OUTPUT_NAME}}
          dest: spc_${{matrix.os}}.zip
      #- name: Upload artifact
      #  id: artifacts
      #  uses: actions/upload-artifact@v4
      #  with:
      #    name: spc_${{matrix.os}}
      #    path: dist/${{matrix.OUTPUT_NAME}}
      #    #name: Release ${{ needs.tag_version.outputs.new_tag }}
      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.tag_version.outputs.upload_url }}
          asset_name: '${{runner.os}}-${{matrix.OUTPUT_NAME}}.zip'
          asset_path: 'spc_${{matrix.os}}.zip'
          asset_content_type: application/zip
